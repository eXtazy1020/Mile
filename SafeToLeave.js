import { Menu, EventsSDK, PlayerResource, Utils, GameState } from "wrapper/Imports";
let _a = [...Utils.parseKVFile("scripts/npc/npc_heroes.txt").get("DOTAHeroes").values()];

let _f = a => {
  return a instanceof Map;
};

let _r = [];

for (let _i = _a.length; _i--;) {
  if (_f(_a[_i], _i, _a)) {
    _r.push(_a[_i]);
  }
}

const tree = Menu.AddEntry(["Utility", "Bait leave"]),
      autodisconnect = tree.AddToggle("Auto Disconnect"),
      Additionaldelay = tree.AddSlider("Delay auto disconnect", 1, 1, 10),
      playersList = tree.AddSwitcher("Player ID", ["Player 1", "Player 2", "Player 3", "Player 4", "Player 5", "Player 6", "Player 7", "Player 8", "Player 9", "Player 10"]),
      colors = ["#415fff", "#83ffda", "#c3009c", "#d5ff16", "#f16900", "#ff6ca5", "#85c83b", "#74d6f9", "#009e31", "#8f6f00"],
      gap = "<br>".repeat(75),
      Language = tree.AddSwitcher("Language", ["Russian", "English"]),
      button = tree.AddButton("Leave button"),
      heroes = _r;
let dc_time = 0;
button.OnValue(() => {
  if (PlayerResource === undefined) {
    return;
  }

  let PlayerID = playersList.selected_id;
  let PlayerName = PlayerResource.PlayerData[PlayerID]?.Name ?? "",
      PlayerHeroID = (PlayerResource.PlayerTeamData[PlayerID]?.SelectedHeroID ?? 0).toString(),
      switch_language = "";
  let PlayerHero = heroes.find(hero => {
    return hero.get("HeroID") === PlayerHeroID;
  })?.get("workshop_guide_name") ?? "";

  switch (Language.selected_id) {
    case 0:
      switch_language = `
<font color="${colors[PlayerID]}">${PlayerName} (${PlayerHero})</font> отключается от игры. Пожалуйста, дождитесь повторного подключения.<br><font color='#FF0000'>
<b>У <font color="${colors[PlayerID]}">${PlayerName} (${PlayerHero})</font> осталось 5 мин. для повторного подключения.</b></font>
<br> <font color="${colors[PlayerID]}">${PlayerName} (${PlayerHero})</font> покидает игру.<br><font color='#00FF00'><b>Теперь эту игру можно спокойно покинуть.</b></font>`;
      break;

    case 1:
      switch_language = `
<font color="${colors[PlayerID]}">${PlayerName} (${PlayerHero})</font> has disconnected from the game. Please wait for them to reconnect.<br><font color='#FF0000'>
<b> <font color="${colors[PlayerID]}">${PlayerName} (${PlayerHero})</font> has 5 minutes left to reconnect.</b></font>
<br> <font color="${colors[PlayerID]}">${PlayerName} (${PlayerHero})</font> has abandoned the game.<br><font color='#00FF00'><b>This game is now safe to leave.</b></font>`;
      break;
  }

  ChatWheelAbuse(gap + switch_language);

  if (autodisconnect.value) {
    dc_time = hrtime();
  }
});
EventsSDK.on("Draw", () => {
  if (dc_time === 0 || dc_time + Additionaldelay.value * 1000 > hrtime()) {
    return;
  }

  GameState.ExecuteCommand("disconnect");
  dc_time = 0;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyY190cy9MZWF2ZXIudHMiXSwibmFtZXMiOlsiTWVudSIsIkV2ZW50c1NESyIsIlBsYXllclJlc291cmNlIiwiVXRpbHMiLCJHYW1lU3RhdGUiLCJwYXJzZUtWRmlsZSIsImdldCIsInZhbHVlcyIsImEiLCJNYXAiLCJ0cmVlIiwiQWRkRW50cnkiLCJhdXRvZGlzY29ubmVjdCIsIkFkZFRvZ2dsZSIsIkFkZGl0aW9uYWxkZWxheSIsIkFkZFNsaWRlciIsInBsYXllcnNMaXN0IiwiQWRkU3dpdGNoZXIiLCJjb2xvcnMiLCJnYXAiLCJyZXBlYXQiLCJMYW5ndWFnZSIsImJ1dHRvbiIsIkFkZEJ1dHRvbiIsImhlcm9lcyIsImRjX3RpbWUiLCJPblZhbHVlIiwidW5kZWZpbmVkIiwiUGxheWVySUQiLCJzZWxlY3RlZF9pZCIsIlBsYXllck5hbWUiLCJQbGF5ZXJEYXRhIiwiTmFtZSIsIlBsYXllckhlcm9JRCIsIlBsYXllclRlYW1EYXRhIiwiU2VsZWN0ZWRIZXJvSUQiLCJ0b1N0cmluZyIsInN3aXRjaF9sYW5ndWFnZSIsIlBsYXllckhlcm8iLCJmaW5kIiwiaGVybyIsIkNoYXRXaGVlbEFidXNlIiwidmFsdWUiLCJocnRpbWUiLCJvbiIsIkV4ZWN1dGVDb21tYW5kIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxJQUFULEVBQWVDLFNBQWYsRUFBMEJDLGNBQTFCLEVBQTBDQyxLQUExQyxFQUFpREMsU0FBakQsUUFBa0UsaUJBQWxFO1NBV1UsQ0FBQyxHQUFJRCxLQUFLLENBQUNFLFdBQU4sQ0FBa0IsNEJBQWxCLEVBQWdEQyxHQUFoRCxDQUFvRCxZQUFwRCxDQUFELENBQW9GQyxNQUFwRixFQUFKLEM7O1NBQXlHQyxDQUFDO0FBQUEsU0FBSUEsQ0FBQyxZQUFZQyxHQUFqQjtBQUFBLEM7Ozs7Ozs7Ozs7QUFScEgsTUFBTUMsSUFBSSxHQUFHVixJQUFJLENBQUNXLFFBQUwsQ0FBYyxDQUFDLFNBQUQsRUFBWSxZQUFaLENBQWQsQ0FBYjtBQUFBLE1BQ0NDLGNBQWMsR0FBR0YsSUFBSSxDQUFDRyxTQUFMLENBQWUsaUJBQWYsQ0FEbEI7QUFBQSxNQUVDQyxlQUFlLEdBQUdKLElBQUksQ0FBQ0ssU0FBTCxDQUFlLHVCQUFmLEVBQXdDLENBQXhDLEVBQTJDLENBQTNDLEVBQThDLEVBQTlDLENBRm5CO0FBQUEsTUFHQ0MsV0FBVyxHQUFHTixJQUFJLENBQUNPLFdBQUwsQ0FBaUIsV0FBakIsRUFBOEIsQ0FBQyxVQUFELEVBQWEsVUFBYixFQUF5QixVQUF6QixFQUFxQyxVQUFyQyxFQUFpRCxVQUFqRCxFQUE2RCxVQUE3RCxFQUF5RSxVQUF6RSxFQUFxRixVQUFyRixFQUFpRyxVQUFqRyxFQUE2RyxXQUE3RyxDQUE5QixDQUhmO0FBQUEsTUFJQ0MsTUFBTSxHQUFHLENBQUMsU0FBRCxFQUFZLFNBQVosRUFBdUIsU0FBdkIsRUFBa0MsU0FBbEMsRUFBNkMsU0FBN0MsRUFBd0QsU0FBeEQsRUFBbUUsU0FBbkUsRUFBOEUsU0FBOUUsRUFBeUYsU0FBekYsRUFBb0csU0FBcEcsQ0FKVjtBQUFBLE1BS0NDLEdBQUcsR0FBRyxPQUFPQyxNQUFQLENBQWMsRUFBZCxDQUxQO0FBQUEsTUFNQ0MsUUFBUSxHQUFHWCxJQUFJLENBQUNPLFdBQUwsQ0FBaUIsVUFBakIsRUFBNkIsQ0FBQyxTQUFELEVBQVksU0FBWixDQUE3QixDQU5aO0FBQUEsTUFPQ0ssTUFBTSxHQUFHWixJQUFJLENBQUNhLFNBQUwsQ0FBZSxjQUFmLENBUFY7QUFBQSxNQVFDQyxNQUFNLEtBUlA7QUFVQSxJQUFJQyxPQUFPLEdBQUcsQ0FBZDtBQUNBSCxNQUFNLENBQUNJLE9BQVAsQ0FBZSxNQUFNO0FBQ3BCLE1BQUl4QixjQUFjLEtBQUt5QixTQUF2QjtBQUNDO0FBREQ7O0FBRUEsTUFBSUMsUUFBUSxHQUFHWixXQUFXLENBQUNhLFdBQTNCO0FBRUEsTUFBSUMsVUFBVSxHQUFHNUIsY0FBYyxDQUFDNkIsVUFBZixDQUEwQkgsUUFBMUIsR0FBcUNJLElBQXJDLElBQTZDLEVBQTlEO0FBQUEsTUFDQ0MsWUFBWSxHQUFHLENBQUMvQixjQUFjLENBQUNnQyxjQUFmLENBQThCTixRQUE5QixHQUF5Q08sY0FBekMsSUFBMkQsQ0FBNUQsRUFBK0RDLFFBQS9ELEVBRGhCO0FBQUEsTUFFQ0MsZUFBdUIsR0FBRyxFQUYzQjtBQUlBLE1BQUlDLFVBQVUsR0FBR2QsTUFBTSxDQUFDZSxJQUFQLENBQVlDLElBQUk7QUFBQSxXQUFLQSxJQUFJLENBQUNsQyxHQUFMLENBQVMsUUFBVCxDQUFELEtBQW1DMkIsWUFBdkM7QUFBQSxHQUFoQixHQUFzRTNCLEdBQXRFLENBQTBFLHFCQUExRSxLQUFvRyxFQUFySDs7QUFDQSxVQUFRZSxRQUFRLENBQUNRLFdBQWpCO0FBQ0MsU0FBSyxDQUFMO0FBQ0NRLE1BQUFBLGVBQWUsR0FBSTtlQUNQbkIsTUFBTSxDQUFDVSxRQUFELENBQVcsS0FBSUUsVUFBVyxLQUFJUSxVQUFXO29CQUMxQ3BCLE1BQU0sQ0FBQ1UsUUFBRCxDQUFXLEtBQUlFLFVBQVcsS0FBSVEsVUFBVztvQkFDL0NwQixNQUFNLENBQUNVLFFBQUQsQ0FBVyxLQUFJRSxVQUFXLEtBQUlRLFVBQVcseUdBSGhFO0FBSUE7O0FBQ0QsU0FBSyxDQUFMO0FBQ0NELE1BQUFBLGVBQWUsR0FBSTtlQUNQbkIsTUFBTSxDQUFDVSxRQUFELENBQVcsS0FBSUUsVUFBVyxLQUFJUSxVQUFXO21CQUMzQ3BCLE1BQU0sQ0FBQ1UsUUFBRCxDQUFXLEtBQUlFLFVBQVcsS0FBSVEsVUFBVztvQkFDOUNwQixNQUFNLENBQUNVLFFBQUQsQ0FBVyxLQUFJRSxVQUFXLEtBQUlRLFVBQVcseUdBSGhFO0FBSUE7QUFaRjs7QUFjQUcsRUFBQUEsY0FBYyxDQUFDdEIsR0FBRyxHQUFHa0IsZUFBUCxDQUFkOztBQUVBLE1BQUl6QixjQUFjLENBQUM4QixLQUFuQjtBQUNDakIsSUFBQUEsT0FBTyxHQUFHa0IsTUFBTSxFQUFoQjtBQUREO0FBRUEsQ0E1QkQ7QUE4QkExQyxTQUFTLENBQUMyQyxFQUFWLENBQWEsTUFBYixFQUFxQixNQUFNO0FBQzFCLE1BQUluQixPQUFPLEtBQUssQ0FBWixJQUFpQkEsT0FBTyxHQUFHWCxlQUFlLENBQUM0QixLQUFoQixHQUF3QixJQUFsQyxHQUF5Q0MsTUFBTSxFQUFwRTtBQUNDO0FBREQ7O0FBRUF2QyxFQUFBQSxTQUFTLENBQUN5QyxjQUFWLENBQXlCLFlBQXpCO0FBQ0FwQixFQUFBQSxPQUFPLEdBQUcsQ0FBVjtBQUNBLENBTEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZW51LCBFdmVudHNTREssIFBsYXllclJlc291cmNlLCBVdGlscywgR2FtZVN0YXRlIH0gZnJvbSBcIndyYXBwZXIvSW1wb3J0c1wiXHJcbmltcG9ydCB7IFJlY3Vyc2l2ZU1hcCB9IGZyb20gXCIuL3dyYXBwZXIvVXRpbHMvUGFyc2VLVlwiXHJcblxyXG5jb25zdCB0cmVlID0gTWVudS5BZGRFbnRyeShbXCJVdGlsaXR5XCIsIFwiQmFpdCBsZWF2ZVwiXSksXHJcblx0YXV0b2Rpc2Nvbm5lY3QgPSB0cmVlLkFkZFRvZ2dsZShcIkF1dG8gRGlzY29ubmVjdFwiKSxcclxuXHRBZGRpdGlvbmFsZGVsYXkgPSB0cmVlLkFkZFNsaWRlcihcIkRlbGF5IGF1dG8gZGlzY29ubmVjdFwiLCAxLCAxLCAxMCksXHJcblx0cGxheWVyc0xpc3QgPSB0cmVlLkFkZFN3aXRjaGVyKFwiUGxheWVyIElEXCIsIFtcIlBsYXllciAxXCIsIFwiUGxheWVyIDJcIiwgXCJQbGF5ZXIgM1wiLCBcIlBsYXllciA0XCIsIFwiUGxheWVyIDVcIiwgXCJQbGF5ZXIgNlwiLCBcIlBsYXllciA3XCIsIFwiUGxheWVyIDhcIiwgXCJQbGF5ZXIgOVwiLCBcIlBsYXllciAxMFwiXSksXHJcblx0Y29sb3JzID0gW1wiIzQxNWZmZlwiLCBcIiM4M2ZmZGFcIiwgXCIjYzMwMDljXCIsIFwiI2Q1ZmYxNlwiLCBcIiNmMTY5MDBcIiwgXCIjZmY2Y2E1XCIsIFwiIzg1YzgzYlwiLCBcIiM3NGQ2ZjlcIiwgXCIjMDA5ZTMxXCIsIFwiIzhmNmYwMFwiXSxcclxuXHRnYXAgPSBcIjxicj5cIi5yZXBlYXQoNzUpLFxyXG5cdExhbmd1YWdlID0gdHJlZS5BZGRTd2l0Y2hlcihcIkxhbmd1YWdlXCIsIFtcIlJ1c3NpYW5cIiwgXCJFbmdsaXNoXCJdKSxcclxuXHRidXR0b24gPSB0cmVlLkFkZEJ1dHRvbihcIkxlYXZlIGJ1dHRvblwiKSxcclxuXHRoZXJvZXMgPSBbLi4uKFV0aWxzLnBhcnNlS1ZGaWxlKFwic2NyaXB0cy9ucGMvbnBjX2hlcm9lcy50eHRcIikuZ2V0KFwiRE9UQUhlcm9lc1wiKSBhcyBSZWN1cnNpdmVNYXApLnZhbHVlcygpXS5maWx0ZXIoYSA9PiBhIGluc3RhbmNlb2YgTWFwKSBhcyBSZWN1cnNpdmVNYXBbXVxyXG5cclxubGV0IGRjX3RpbWUgPSAwXHJcbmJ1dHRvbi5PblZhbHVlKCgpID0+IHtcclxuXHRpZiAoUGxheWVyUmVzb3VyY2UgPT09IHVuZGVmaW5lZClcclxuXHRcdHJldHVyblxyXG5cdGxldCBQbGF5ZXJJRCA9IHBsYXllcnNMaXN0LnNlbGVjdGVkX2lkXHJcblxyXG5cdGxldCBQbGF5ZXJOYW1lID0gUGxheWVyUmVzb3VyY2UuUGxheWVyRGF0YVtQbGF5ZXJJRF0/Lk5hbWUgPz8gXCJcIixcclxuXHRcdFBsYXllckhlcm9JRCA9IChQbGF5ZXJSZXNvdXJjZS5QbGF5ZXJUZWFtRGF0YVtQbGF5ZXJJRF0/LlNlbGVjdGVkSGVyb0lEID8/IDApLnRvU3RyaW5nKCksXHJcblx0XHRzd2l0Y2hfbGFuZ3VhZ2U6IHN0cmluZyA9IFwiXCJcclxuXHJcblx0bGV0IFBsYXllckhlcm8gPSBoZXJvZXMuZmluZChoZXJvID0+IChoZXJvLmdldChcIkhlcm9JRFwiKSBhcyBzdHJpbmcpID09PSBQbGF5ZXJIZXJvSUQpPy5nZXQoXCJ3b3Jrc2hvcF9ndWlkZV9uYW1lXCIpID8/IFwiXCJcclxuXHRzd2l0Y2ggKExhbmd1YWdlLnNlbGVjdGVkX2lkKSB7XHJcblx0XHRjYXNlIDA6XHJcblx0XHRcdHN3aXRjaF9sYW5ndWFnZSA9IGBcclxuPGZvbnQgY29sb3I9XCIke2NvbG9yc1tQbGF5ZXJJRF19XCI+JHtQbGF5ZXJOYW1lfSAoJHtQbGF5ZXJIZXJvfSk8L2ZvbnQ+INC+0YLQutC70Y7Rh9Cw0LXRgtGB0Y8g0L7RgiDQuNCz0YDRiy4g0J/QvtC20LDQu9GD0LnRgdGC0LAsINC00L7QttC00LjRgtC10YHRjCDQv9C+0LLRgtC+0YDQvdC+0LPQviDQv9C+0LTQutC70Y7Rh9C10L3QuNGPLjxicj48Zm9udCBjb2xvcj0nI0ZGMDAwMCc+XHJcbjxiPtCjIDxmb250IGNvbG9yPVwiJHtjb2xvcnNbUGxheWVySURdfVwiPiR7UGxheWVyTmFtZX0gKCR7UGxheWVySGVyb30pPC9mb250PiDQvtGB0YLQsNC70L7RgdGMIDUg0LzQuNC9LiDQtNC70Y8g0L/QvtCy0YLQvtGA0L3QvtCz0L4g0L/QvtC00LrQu9GO0YfQtdC90LjRjy48L2I+PC9mb250PlxyXG48YnI+IDxmb250IGNvbG9yPVwiJHtjb2xvcnNbUGxheWVySURdfVwiPiR7UGxheWVyTmFtZX0gKCR7UGxheWVySGVyb30pPC9mb250PiDQv9C+0LrQuNC00LDQtdGCINC40LPRgNGDLjxicj48Zm9udCBjb2xvcj0nIzAwRkYwMCc+PGI+0KLQtdC/0LXRgNGMINGN0YLRgyDQuNCz0YDRgyDQvNC+0LbQvdC+INGB0L/QvtC60L7QudC90L4g0L/QvtC60LjQvdGD0YLRjC48L2I+PC9mb250PmBcclxuXHRcdFx0YnJlYWtcclxuXHRcdGNhc2UgMTpcclxuXHRcdFx0c3dpdGNoX2xhbmd1YWdlID0gYFxyXG48Zm9udCBjb2xvcj1cIiR7Y29sb3JzW1BsYXllcklEXX1cIj4ke1BsYXllck5hbWV9ICgke1BsYXllckhlcm99KTwvZm9udD4gaGFzIGRpc2Nvbm5lY3RlZCBmcm9tIHRoZSBnYW1lLiBQbGVhc2Ugd2FpdCBmb3IgdGhlbSB0byByZWNvbm5lY3QuPGJyPjxmb250IGNvbG9yPScjRkYwMDAwJz5cclxuPGI+IDxmb250IGNvbG9yPVwiJHtjb2xvcnNbUGxheWVySURdfVwiPiR7UGxheWVyTmFtZX0gKCR7UGxheWVySGVyb30pPC9mb250PiBoYXMgNSBtaW51dGVzIGxlZnQgdG8gcmVjb25uZWN0LjwvYj48L2ZvbnQ+XHJcbjxicj4gPGZvbnQgY29sb3I9XCIke2NvbG9yc1tQbGF5ZXJJRF19XCI+JHtQbGF5ZXJOYW1lfSAoJHtQbGF5ZXJIZXJvfSk8L2ZvbnQ+IGhhcyBhYmFuZG9uZWQgdGhlIGdhbWUuPGJyPjxmb250IGNvbG9yPScjMDBGRjAwJz48Yj5UaGlzIGdhbWUgaXMgbm93IHNhZmUgdG8gbGVhdmUuPC9iPjwvZm9udD5gXHJcblx0XHRcdGJyZWFrXHJcblx0fVxyXG5cdENoYXRXaGVlbEFidXNlKGdhcCArIHN3aXRjaF9sYW5ndWFnZSlcclxuXHJcblx0aWYgKGF1dG9kaXNjb25uZWN0LnZhbHVlKVxyXG5cdFx0ZGNfdGltZSA9IGhydGltZSgpXHJcbn0pXHJcblxyXG5FdmVudHNTREsub24oXCJEcmF3XCIsICgpID0+IHtcclxuXHRpZiAoZGNfdGltZSA9PT0gMCB8fCBkY190aW1lICsgQWRkaXRpb25hbGRlbGF5LnZhbHVlICogMTAwMCA+IGhydGltZSgpKVxyXG5cdFx0cmV0dXJuXHJcblx0R2FtZVN0YXRlLkV4ZWN1dGVDb21tYW5kKFwiZGlzY29ubmVjdFwiKVxyXG5cdGRjX3RpbWUgPSAwXHJcbn0pXHJcbiJdfQ==